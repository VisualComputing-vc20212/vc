<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Visual Computing</title><link>https://visualcomputing-vc20212.github.io/vc/docs/shortcodes/Rendering/</link><description>Recent content on Visual Computing</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://visualcomputing-vc20212.github.io/vc/docs/shortcodes/Rendering/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://visualcomputing-vc20212.github.io/vc/docs/shortcodes/Rendering/Antialiasing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing-vc20212.github.io/vc/docs/shortcodes/Rendering/Antialiasing/</guid><description>Rasterisation # # let img; function preload(){ img = loadImage(&amp;#39;https://pbs.twimg.com/profile_images/1317243402396831744/vOz-5Cju_400x400.jpg&amp;#39;); } function setup() { BG = color(&amp;#34;#f1f1f1&amp;#34;); FG = color(&amp;#34;#111111&amp;#34;); createCanvas(700, 700); img.resize(700, 700); } function draw() { background(BG); fill(FG); noStroke(); let ratio = float(height)/float(width); let tilesX = map(mouseX, 0, width, 10, 100); let tilesY = ratio * tilesX; let tileSize = width / tilesX; for (let y = 0; y &amp;lt; img.height; y &amp;#43;= tileSize) { for (let x = 0; x &amp;lt; img.</description></item><item><title/><link>https://visualcomputing-vc20212.github.io/vc/docs/shortcodes/Rendering/Painters-Algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing-vc20212.github.io/vc/docs/shortcodes/Rendering/Painters-Algorithm/</guid><description>Painters' Algorithm # El algoritmo del pintor, también algoritmo de ordenación de la profundidad o relleno prioritario, es un algoritmo para la determinación de la superficie visible en gráficos 3D,que funciona polígono a polígono para la eliminación de superficies ocultas al punto de vista del observador.
El algoritmo del pintor crea imágenes clasificando los polígonos dentro de la imagen por su profundidad y colocando cada polígono en orden desde el objeto más lejano al más cercano.</description></item></channel></rss>