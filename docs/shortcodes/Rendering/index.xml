<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Visual Computing</title><link>https://visualcomputing-vc20212.github.io/vc/docs/shortcodes/Rendering/</link><description>Recent content on Visual Computing</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://visualcomputing-vc20212.github.io/vc/docs/shortcodes/Rendering/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://visualcomputing-vc20212.github.io/vc/docs/shortcodes/Rendering/Painters-Algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing-vc20212.github.io/vc/docs/shortcodes/Rendering/Painters-Algorithm/</guid><description>Painters' Algorithm # El algoritmo del pintor, también algoritmo de ordenación de la profundidad o relleno prioritario, es un algoritmo para la determinación de la superficie visible en gráficos 3D,que funciona polígono a polígono para la eliminación de superficies ocultas al punto de vista del observador. Este algoritmo crea imágenes clasificando los polígonos dentro de la imagen por su profundidad y colocando cada polígono en orden desde el objeto más lejano al más cercano.</description></item><item><title/><link>https://visualcomputing-vc20212.github.io/vc/docs/shortcodes/Rendering/Rasterizaci%C3%B3n/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing-vc20212.github.io/vc/docs/shortcodes/Rendering/Rasterizaci%C3%B3n/</guid><description>Rasterización # Explicación # Este algoritmo de rasterización utiliza el brillo de cada pixel para asignar el tamaño de cada celda. Esto se asocia mucho a las técnicas de antialiasing, esta técnica se trata en que si un pixel se encuentra dentro de cierta area, basado en el brillo de este, se pinta o no el pixel, la técnica consta en que cada vez se van haciendo más y más subparticiones dentro de los pixeles para así dejar una imagen clara y lisa.</description></item><item><title/><link>https://visualcomputing-vc20212.github.io/vc/docs/shortcodes/Rendering/Vertex-Shander-and-Fragment-Shader/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing-vc20212.github.io/vc/docs/shortcodes/Rendering/Vertex-Shander-and-Fragment-Shader/</guid><description>Vertex Shader and Fragment Shader # Referencias # https://openprocessing.org/sketch/1391541 by Prakhar Aditya</description></item></channel></rss>